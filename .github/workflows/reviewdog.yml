# The name of the workflow as it appears in the Actions tab.
name: Reviewdog

# This workflow will run on every push and pull request.
# You can customize this to only run on pull requests to specific branches.
on: [pull_request]

# Defines the permissions for the GITHUB_TOKEN.
# `contents: read` is needed to checkout the code.
# `pull-requests: write` is needed for reviewdog to comment on the PR.
permissions:
  contents: read
  pull-requests: write

# A workflow is made up of one or more jobs. This workflow has one job named 'reviewdog'.
jobs:
  reviewdog:
    # The name of the job displayed in the UI.
    name: Run Reviewdog
    # The type of machine to run the job on.
    runs-on: ubuntu-latest

    # The steps within the job.
    steps:
      # Step 1: Check out the repository.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up the programming language environment.
      # This step is specific to your project. Here we set up Go.
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # Step 3: Set up Reviewdog.
      # This action installs the reviewdog CLI tool.
      - name: Setup Reviewdog
        uses: reviewdog/action-setup@e04ffabe3898a0af8d0fb1af00c188831c4b5893 # v1.3.2
        with:
          reviewdog_version: latest

      # Step 4: Run your linter and pipe the output to Reviewdog.
      # This is the core step. You'll need to customize this for your linter.
      # We use `golangci-lint` here as an example.
      - name: Run golangci-lint
        env:
          # This token is automatically provided by GitHub Actions and
          # allows reviewdog to post comments and checks.
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install the linter. This is often necessary for non-action based setups.
          # We are installing golangci-lint here.
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.58.1

          # Run the linter and pipe its output to reviewdog.
          # - `--out-format=line-number`: Tells golangci-lint to output findings in a format reviewdog can easily parse.
          # - `-f=golangci-lint`: Tells reviewdog to use its predefined format for golangci-lint.
          # - `-reporter=github-pr-check`: Posts the findings as a check on the PR.
          # - `-fail-on-error`: Makes the workflow fail if any issues are found.
          golangci-lint run --out-format=line-number | reviewdog -f=golangci-lint -reporter=github-pr-check -fail-on-error